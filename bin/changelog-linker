#!/usr/bin/env php
<?php

declare(strict_types=1);

use Symplify\ChangelogLinker\Console\ChangelogApplication;
use Symfony\Component\Console\Input\ArgvInput;
use Symplify\ChangelogLinker\HttpKernel\ChangelogLinkerKernel;
use Symplify\SetConfigResolver\ConfigResolver;
use Symplify\PackageBuilder\Console\Input\InputDetector;

$possibleAutoloadPaths = [
    // after split package
    __DIR__ . '/../vendor/autoload.php',
    // dependency
    __DIR__ . '/../../../autoload.php',
    // monorepo
    __DIR__ . '/../../../vendor/autoload.php',
];

foreach ($possibleAutoloadPaths as $possibleAutoloadPath) {
    if (file_exists($possibleAutoloadPath)) {
        require_once $possibleAutoloadPath;

        break;
    }
}

$configs = [];

$configResolver = new ConfigResolver();
$inputConfig = $configResolver->resolveFromInputWithFallback(new ArgvInput(), [
    'changelog-linker.yml', 'changelog-linker.yaml'
]);

if ($inputConfig !== null) {
    $configs[] = $inputConfig;
}

// create container
// random has is needed, so cache is invalidated and changes from config are loaded
$environment = 'prod' . random_int(1, 100000);
$changelogLinkerKernel = new ChangelogLinkerKernel($environment, InputDetector::isDebug());
if ($configs) {
    $changelogLinkerKernel->setConfigs($configs);
}

$changelogLinkerKernel->boot();

$container = $changelogLinkerKernel->getContainer();

// run application
$application = $container->get(ChangelogApplication::class);
exit($application->run());
